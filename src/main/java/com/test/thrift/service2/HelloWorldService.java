package com.test.thrift.service2;///**
// * Autogenerated by Thrift Compiler (0.9.3)
// *
// * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// *  @generated
// */
//package com.test.thrift;
//
//import org.apache.thrift.scheme.IScheme;
//import org.apache.thrift.scheme.SchemeFactory;
//import org.apache.thrift.scheme.StandardScheme;
//
//import org.apache.thrift.scheme.TupleScheme;
//import org.apache.thrift.protocol.TTupleProtocol;
//import org.apache.thrift.protocol.TProtocolException;
//import org.apache.thrift.EncodingUtils;
//import org.apache.thrift.TException;
//import org.apache.thrift.async.AsyncMethodCallback;
//import org.apache.thrift.server.AbstractNonblockingServer.*;
//import java.util.List;
//import java.util.ArrayList;
//import java.util.Map;
//import java.util.HashMap;
//import java.util.EnumMap;
//import java.util.Set;
//import java.util.HashSet;
//import java.util.EnumSet;
//import java.util.Collections;
//import java.util.BitSet;
//import java.nio.ByteBuffer;
//import java.util.Arrays;
//import javax.annotation.Generated;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//
//@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
//@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-03-05")
//public class HelloWorldService {
//
//  public interface Iface {
//
//    public String say(String username) throws org.apache.thrift.TException;
//
//    public String work(String username, int hour) throws org.apache.thrift.TException;
//
//  }
//
//  public interface AsyncIface {
//
//    public void say(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
//
//    public void work(String username, int hour, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
//
//  }
//
//  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
//    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
//      public Factory() {}
//      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
//        return new Client(prot);
//      }
//      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
//        return new Client(iprot, oprot);
//      }
//    }
//
//    public Client(org.apache.thrift.protocol.TProtocol prot)
//    {
//      super(prot, prot);
//    }
//
//    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
//      super(iprot, oprot);
//    }
//
//    public String say(String username) throws org.apache.thrift.TException
//    {
//      send_say(username);
//      return recv_say();
//    }
//
//    public void send_say(String username) throws org.apache.thrift.TException
//    {
//      say_args args = new say_args();
//      args.setUsername(username);
//      sendBase("say", args);
//    }
//
//    public String recv_say() throws org.apache.thrift.TException
//    {
//      say_result result = new say_result();
//      receiveBase(result, "say");
//      if (result.isSetSuccess()) {
//        return result.success;
//      }
//      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "say failed: unknown result");
//    }
//
//    public String work(String username, int hour) throws org.apache.thrift.TException
//    {
//      send_work(username, hour);
//      return recv_work();
//    }
//
//    public void send_work(String username, int hour) throws org.apache.thrift.TException
//    {
//      work_args args = new work_args();
//      args.setUsername(username);
//      args.setHour(hour);
//      sendBase("work", args);
//    }
//
//    public String recv_work() throws org.apache.thrift.TException
//    {
//      work_result result = new work_result();
//      receiveBase(result, "work");
//      if (result.isSetSuccess()) {
//        return result.success;
//      }
//      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "work failed: unknown result");
//    }
//
//  }
//  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
//    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
//      private org.apache.thrift.async.TAsyncClientManager clientManager;
//      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
//      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
//        this.clientManager = clientManager;
//        this.protocolFactory = protocolFactory;
//      }
//      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
//        return new AsyncClient(protocolFactory, clientManager, transport);
//      }
//    }
//
//    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
//      super(protocolFactory, clientManager, transport);
//    }
//
//    public void say(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
//      checkReady();
//      say_call method_call = new say_call(username, resultHandler, this, ___protocolFactory, ___transport);
//      this.___currentMethod = method_call;
//      ___manager.call(method_call);
//    }
//
//    public static class say_call extends org.apache.thrift.async.TAsyncMethodCall {
//      private String username;
//      public say_call(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
//        super(client, protocolFactory, transport, resultHandler, false);
//        this.username = username;
//      }
//
//      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
//        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("say", org.apache.thrift.protocol.TMessageType.CALL, 0));
//        say_args args = new say_args();
//        args.setUsername(username);
//        args.write(prot);
//        prot.writeMessageEnd();
//      }
//
//      public String getResult() throws org.apache.thrift.TException {
//        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
//          throw new IllegalStateException("Method call not finished!");
//        }
//        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
//        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
//        return (new Client(prot)).recv_say();
//      }
//    }
//
//    public void work(String username, int hour, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
//      checkReady();
//      work_call method_call = new work_call(username, hour, resultHandler, this, ___protocolFactory, ___transport);
//      this.___currentMethod = method_call;
//      ___manager.call(method_call);
//    }
//
//    public static class work_call extends org.apache.thrift.async.TAsyncMethodCall {
//      private String username;
//      private int hour;
//      public work_call(String username, int hour, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
//        super(client, protocolFactory, transport, resultHandler, false);
//        this.username = username;
//        this.hour = hour;
//      }
//
//      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
//        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("work", org.apache.thrift.protocol.TMessageType.CALL, 0));
//        work_args args = new work_args();
//        args.setUsername(username);
//        args.setHour(hour);
//        args.write(prot);
//        prot.writeMessageEnd();
//      }
//
//      public String getResult() throws org.apache.thrift.TException {
//        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
//          throw new IllegalStateException("Method call not finished!");
//        }
//        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
//        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
//        return (new Client(prot)).recv_work();
//      }
//    }
//
//  }
//
//  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
//    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
//    public Processor(I iface) {
//      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
//    }
//
//    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
//      super(iface, getProcessMap(processMap));
//    }
//
//    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
//      processMap.put("say", new say());
//      processMap.put("work", new work());
//      return processMap;
//    }
//
//    public static class say<I extends Iface> extends org.apache.thrift.ProcessFunction<I, say_args> {
//      public say() {
//        super("say");
//      }
//
//      public say_args getEmptyArgsInstance() {
//        return new say_args();
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public say_result getResult(I iface, say_args args) throws org.apache.thrift.TException {
//        say_result result = new say_result();
//        result.success = iface.say(args.username);
//        return result;
//      }
//    }
//
//    public static class work<I extends Iface> extends org.apache.thrift.ProcessFunction<I, work_args> {
//      public work() {
//        super("work");
//      }
//
//      public work_args getEmptyArgsInstance() {
//        return new work_args();
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public work_result getResult(I iface, work_args args) throws org.apache.thrift.TException {
//        work_result result = new work_result();
//        result.success = iface.work(args.username, args.hour);
//        return result;
//      }
//    }
//
//  }
//
//  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
//    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
//    public AsyncProcessor(I iface) {
//      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
//    }
//
//    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
//      super(iface, getProcessMap(processMap));
//    }
//
//    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
//      processMap.put("say", new say());
//      processMap.put("work", new work());
//      return processMap;
//    }
//
//    public static class say<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, say_args, String> {
//      public say() {
//        super("say");
//      }
//
//      public say_args getEmptyArgsInstance() {
//        return new say_args();
//      }
//
//      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
//        final org.apache.thrift.AsyncProcessFunction fcall = this;
//        return new AsyncMethodCallback<String>() {
//          public void onComplete(String o) {
//            say_result result = new say_result();
//            result.success = o;
//            try {
//              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
//              return;
//            } catch (Exception e) {
//              LOGGER.error("Exception writing to internal frame buffer", e);
//            }
//            fb.close();
//          }
//          public void onError(Exception e) {
//            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
//            org.apache.thrift.TBase msg;
//            say_result result = new say_result();
//            {
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
//            }
//            try {
//              fcall.sendResponse(fb,msg,msgType,seqid);
//              return;
//            } catch (Exception ex) {
//              LOGGER.error("Exception writing to internal frame buffer", ex);
//            }
//            fb.close();
//          }
//        };
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public void start(I iface, say_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
//        iface.say(args.username,resultHandler);
//      }
//    }
//
//    public static class work<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, work_args, String> {
//      public work() {
//        super("work");
//      }
//
//      public work_args getEmptyArgsInstance() {
//        return new work_args();
//      }
//
//      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
//        final org.apache.thrift.AsyncProcessFunction fcall = this;
//        return new AsyncMethodCallback<String>() {
//          public void onComplete(String o) {
//            work_result result = new work_result();
//            result.success = o;
//            try {
//              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
//              return;
//            } catch (Exception e) {
//              LOGGER.error("Exception writing to internal frame buffer", e);
//            }
//            fb.close();
//          }
//          public void onError(Exception e) {
//            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
//            org.apache.thrift.TBase msg;
//            work_result result = new work_result();
//            {
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
//            }
//            try {
//              fcall.sendResponse(fb,msg,msgType,seqid);
//              return;
//            } catch (Exception ex) {
//              LOGGER.error("Exception writing to internal frame buffer", ex);
//            }
//            fb.close();
//          }
//        };
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public void start(I iface, work_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
//        iface.work(args.username, args.hour,resultHandler);
//      }
//    }
//
//  }
//
//  public static class say_args implements org.apache.thrift.TBase<say_args, say_args._Fields>, java.io.Serializable, Cloneable, Comparable<say_args>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("say_args");
//
//    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new say_argsStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new say_argsTupleSchemeFactory());
//    }
//
//    public String username; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      USERNAME((short)1, "username");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 1: // USERNAME
//            return USERNAME;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(say_args.class, metaDataMap);
//    }
//
//    public say_args() {
//    }
//
//    public say_args(
//      String username)
//    {
//      this();
//      this.username = username;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public say_args(say_args other) {
//      if (other.isSetUsername()) {
//        this.username = other.username;
//      }
//    }
//
//    public say_args deepCopy() {
//      return new say_args(this);
//    }
//
//    @Override
//    public void clear() {
//      this.username = null;
//    }
//
//    public String getUsername() {
//      return this.username;
//    }
//
//    public say_args setUsername(String username) {
//      this.username = username;
//      return this;
//    }
//
//    public void unsetUsername() {
//      this.username = null;
//    }
//
//    /** Returns true if field username is set (has been assigned a value) and false otherwise */
//    public boolean isSetUsername() {
//      return this.username != null;
//    }
//
//    public void setUsernameIsSet(boolean value) {
//      if (!value) {
//        this.username = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case USERNAME:
//        if (value == null) {
//          unsetUsername();
//        } else {
//          setUsername((String)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case USERNAME:
//        return getUsername();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case USERNAME:
//        return isSetUsername();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof say_args)
//        return this.equals((say_args)that);
//      return false;
//    }
//
//    public boolean equals(say_args that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_username = true && this.isSetUsername();
//      boolean that_present_username = true && that.isSetUsername();
//      if (this_present_username || that_present_username) {
//        if (!(this_present_username && that_present_username))
//          return false;
//        if (!this.username.equals(that.username))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_username = true && (isSetUsername());
//      list.add(present_username);
//      if (present_username)
//        list.add(username);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(say_args other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetUsername()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//    }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("say_args(");
//      boolean first = true;
//
//      sb.append("username:");
//      if (this.username == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.username);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class say_argsStandardSchemeFactory implements SchemeFactory {
//      public say_argsStandardScheme getScheme() {
//        return new say_argsStandardScheme();
//      }
//    }
//
//    private static class say_argsStandardScheme extends StandardScheme<say_args> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, say_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 1: // USERNAME
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//                struct.username = iprot.readString();
//                struct.setUsernameIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, say_args struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.username != null) {
//          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
//          oprot.writeString(struct.username);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class say_argsTupleSchemeFactory implements SchemeFactory {
//      public say_argsTupleScheme getScheme() {
//        return new say_argsTupleScheme();
//      }
//    }
//
//    private static class say_argsTupleScheme extends TupleScheme<say_args> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, say_args struct) throws org.apache.thrift.TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetUsername()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetUsername()) {
//          oprot.writeString(struct.username);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, say_args struct) throws org.apache.thrift.TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          struct.username = iprot.readString();
//          struct.setUsernameIsSet(true);
//        }
//      }
//    }
//
//  }
//
//  public static class say_result implements org.apache.thrift.TBase<say_result, say_result._Fields>, java.io.Serializable, Cloneable, Comparable<say_result>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("say_result");
//
//    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new say_resultStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new say_resultTupleSchemeFactory());
//    }
//
//    public String success; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      SUCCESS((short)0, "success");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 0: // SUCCESS
//            return SUCCESS;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(say_result.class, metaDataMap);
//    }
//
//    public say_result() {
//    }
//
//    public say_result(
//      String success)
//    {
//      this();
//      this.success = success;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public say_result(say_result other) {
//      if (other.isSetSuccess()) {
//        this.success = other.success;
//      }
//    }
//
//    public say_result deepCopy() {
//      return new say_result(this);
//    }
//
//    @Override
//    public void clear() {
//      this.success = null;
//    }
//
//    public String getSuccess() {
//      return this.success;
//    }
//
//    public say_result setSuccess(String success) {
//      this.success = success;
//      return this;
//    }
//
//    public void unsetSuccess() {
//      this.success = null;
//    }
//
//    /** Returns true if field success is set (has been assigned a value) and false otherwise */
//    public boolean isSetSuccess() {
//      return this.success != null;
//    }
//
//    public void setSuccessIsSet(boolean value) {
//      if (!value) {
//        this.success = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case SUCCESS:
//        if (value == null) {
//          unsetSuccess();
//        } else {
//          setSuccess((String)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case SUCCESS:
//        return getSuccess();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case SUCCESS:
//        return isSetSuccess();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof say_result)
//        return this.equals((say_result)that);
//      return false;
//    }
//
//    public boolean equals(say_result that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_success = true && this.isSetSuccess();
//      boolean that_present_success = true && that.isSetSuccess();
//      if (this_present_success || that_present_success) {
//        if (!(this_present_success && that_present_success))
//          return false;
//        if (!this.success.equals(that.success))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_success = true && (isSetSuccess());
//      list.add(present_success);
//      if (present_success)
//        list.add(success);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(say_result other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetSuccess()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//      }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("say_result(");
//      boolean first = true;
//
//      sb.append("success:");
//      if (this.success == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.success);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class say_resultStandardSchemeFactory implements SchemeFactory {
//      public say_resultStandardScheme getScheme() {
//        return new say_resultStandardScheme();
//      }
//    }
//
//    private static class say_resultStandardScheme extends StandardScheme<say_result> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, say_result struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 0: // SUCCESS
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//                struct.success = iprot.readString();
//                struct.setSuccessIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, say_result struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.success != null) {
//          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
//          oprot.writeString(struct.success);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class say_resultTupleSchemeFactory implements SchemeFactory {
//      public say_resultTupleScheme getScheme() {
//        return new say_resultTupleScheme();
//      }
//    }
//
//    private static class say_resultTupleScheme extends TupleScheme<say_result> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, say_result struct) throws org.apache.thrift.TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetSuccess()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetSuccess()) {
//          oprot.writeString(struct.success);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, say_result struct) throws org.apache.thrift.TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          struct.success = iprot.readString();
//          struct.setSuccessIsSet(true);
//        }
//      }
//    }
//
//  }
//
//  public static class work_args implements org.apache.thrift.TBase<work_args, work_args._Fields>, java.io.Serializable, Cloneable, Comparable<work_args>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("work_args");
//
//    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
//    private static final org.apache.thrift.protocol.TField HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("hour", org.apache.thrift.protocol.TType.I32, (short)2);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new work_argsStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new work_argsTupleSchemeFactory());
//    }
//
//    public String username; // required
//    public int hour; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      USERNAME((short)1, "username"),
//      HOUR((short)2, "hour");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 1: // USERNAME
//            return USERNAME;
//          case 2: // HOUR
//            return HOUR;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    private static final int __HOUR_ISSET_ID = 0;
//    private byte __isset_bitfield = 0;
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
//      tmpMap.put(_Fields.HOUR, new org.apache.thrift.meta_data.FieldMetaData("hour", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(work_args.class, metaDataMap);
//    }
//
//    public work_args() {
//    }
//
//    public work_args(
//      String username,
//      int hour)
//    {
//      this();
//      this.username = username;
//      this.hour = hour;
//      setHourIsSet(true);
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public work_args(work_args other) {
//      __isset_bitfield = other.__isset_bitfield;
//      if (other.isSetUsername()) {
//        this.username = other.username;
//      }
//      this.hour = other.hour;
//    }
//
//    public work_args deepCopy() {
//      return new work_args(this);
//    }
//
//    @Override
//    public void clear() {
//      this.username = null;
//      setHourIsSet(false);
//      this.hour = 0;
//    }
//
//    public String getUsername() {
//      return this.username;
//    }
//
//    public work_args setUsername(String username) {
//      this.username = username;
//      return this;
//    }
//
//    public void unsetUsername() {
//      this.username = null;
//    }
//
//    /** Returns true if field username is set (has been assigned a value) and false otherwise */
//    public boolean isSetUsername() {
//      return this.username != null;
//    }
//
//    public void setUsernameIsSet(boolean value) {
//      if (!value) {
//        this.username = null;
//      }
//    }
//
//    public int getHour() {
//      return this.hour;
//    }
//
//    public work_args setHour(int hour) {
//      this.hour = hour;
//      setHourIsSet(true);
//      return this;
//    }
//
//    public void unsetHour() {
//      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUR_ISSET_ID);
//    }
//
//    /** Returns true if field hour is set (has been assigned a value) and false otherwise */
//    public boolean isSetHour() {
//      return EncodingUtils.testBit(__isset_bitfield, __HOUR_ISSET_ID);
//    }
//
//    public void setHourIsSet(boolean value) {
//      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUR_ISSET_ID, value);
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case USERNAME:
//        if (value == null) {
//          unsetUsername();
//        } else {
//          setUsername((String)value);
//        }
//        break;
//
//      case HOUR:
//        if (value == null) {
//          unsetHour();
//        } else {
//          setHour((Integer)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case USERNAME:
//        return getUsername();
//
//      case HOUR:
//        return getHour();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case USERNAME:
//        return isSetUsername();
//      case HOUR:
//        return isSetHour();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof work_args)
//        return this.equals((work_args)that);
//      return false;
//    }
//
//    public boolean equals(work_args that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_username = true && this.isSetUsername();
//      boolean that_present_username = true && that.isSetUsername();
//      if (this_present_username || that_present_username) {
//        if (!(this_present_username && that_present_username))
//          return false;
//        if (!this.username.equals(that.username))
//          return false;
//      }
//
//      boolean this_present_hour = true;
//      boolean that_present_hour = true;
//      if (this_present_hour || that_present_hour) {
//        if (!(this_present_hour && that_present_hour))
//          return false;
//        if (this.hour != that.hour)
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_username = true && (isSetUsername());
//      list.add(present_username);
//      if (present_username)
//        list.add(username);
//
//      boolean present_hour = true;
//      list.add(present_hour);
//      if (present_hour)
//        list.add(hour);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(work_args other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetUsername()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      lastComparison = Boolean.valueOf(isSetHour()).compareTo(other.isSetHour());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetHour()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hour, other.hour);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//    }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("work_args(");
//      boolean first = true;
//
//      sb.append("username:");
//      if (this.username == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.username);
//      }
//      first = false;
//      if (!first) sb.append(", ");
//      sb.append("hour:");
//      sb.append(this.hour);
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
//        __isset_bitfield = 0;
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class work_argsStandardSchemeFactory implements SchemeFactory {
//      public work_argsStandardScheme getScheme() {
//        return new work_argsStandardScheme();
//      }
//    }
//
//    private static class work_argsStandardScheme extends StandardScheme<work_args> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, work_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 1: // USERNAME
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//                struct.username = iprot.readString();
//                struct.setUsernameIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            case 2: // HOUR
//              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
//                struct.hour = iprot.readI32();
//                struct.setHourIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, work_args struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.username != null) {
//          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
//          oprot.writeString(struct.username);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldBegin(HOUR_FIELD_DESC);
//        oprot.writeI32(struct.hour);
//        oprot.writeFieldEnd();
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class work_argsTupleSchemeFactory implements SchemeFactory {
//      public work_argsTupleScheme getScheme() {
//        return new work_argsTupleScheme();
//      }
//    }
//
//    private static class work_argsTupleScheme extends TupleScheme<work_args> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, work_args struct) throws org.apache.thrift.TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetUsername()) {
//          optionals.set(0);
//        }
//        if (struct.isSetHour()) {
//          optionals.set(1);
//        }
//        oprot.writeBitSet(optionals, 2);
//        if (struct.isSetUsername()) {
//          oprot.writeString(struct.username);
//        }
//        if (struct.isSetHour()) {
//          oprot.writeI32(struct.hour);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, work_args struct) throws org.apache.thrift.TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(2);
//        if (incoming.get(0)) {
//          struct.username = iprot.readString();
//          struct.setUsernameIsSet(true);
//        }
//        if (incoming.get(1)) {
//          struct.hour = iprot.readI32();
//          struct.setHourIsSet(true);
//        }
//      }
//    }
//
//  }
//
//  public static class work_result implements org.apache.thrift.TBase<work_result, work_result._Fields>, java.io.Serializable, Cloneable, Comparable<work_result>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("work_result");
//
//    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new work_resultStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new work_resultTupleSchemeFactory());
//    }
//
//    public String success; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      SUCCESS((short)0, "success");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 0: // SUCCESS
//            return SUCCESS;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(work_result.class, metaDataMap);
//    }
//
//    public work_result() {
//    }
//
//    public work_result(
//      String success)
//    {
//      this();
//      this.success = success;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public work_result(work_result other) {
//      if (other.isSetSuccess()) {
//        this.success = other.success;
//      }
//    }
//
//    public work_result deepCopy() {
//      return new work_result(this);
//    }
//
//    @Override
//    public void clear() {
//      this.success = null;
//    }
//
//    public String getSuccess() {
//      return this.success;
//    }
//
//    public work_result setSuccess(String success) {
//      this.success = success;
//      return this;
//    }
//
//    public void unsetSuccess() {
//      this.success = null;
//    }
//
//    /** Returns true if field success is set (has been assigned a value) and false otherwise */
//    public boolean isSetSuccess() {
//      return this.success != null;
//    }
//
//    public void setSuccessIsSet(boolean value) {
//      if (!value) {
//        this.success = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case SUCCESS:
//        if (value == null) {
//          unsetSuccess();
//        } else {
//          setSuccess((String)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case SUCCESS:
//        return getSuccess();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case SUCCESS:
//        return isSetSuccess();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof work_result)
//        return this.equals((work_result)that);
//      return false;
//    }
//
//    public boolean equals(work_result that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_success = true && this.isSetSuccess();
//      boolean that_present_success = true && that.isSetSuccess();
//      if (this_present_success || that_present_success) {
//        if (!(this_present_success && that_present_success))
//          return false;
//        if (!this.success.equals(that.success))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_success = true && (isSetSuccess());
//      list.add(present_success);
//      if (present_success)
//        list.add(success);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(work_result other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetSuccess()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//      }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("work_result(");
//      boolean first = true;
//
//      sb.append("success:");
//      if (this.success == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.success);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class work_resultStandardSchemeFactory implements SchemeFactory {
//      public work_resultStandardScheme getScheme() {
//        return new work_resultStandardScheme();
//      }
//    }
//
//    private static class work_resultStandardScheme extends StandardScheme<work_result> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, work_result struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 0: // SUCCESS
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//                struct.success = iprot.readString();
//                struct.setSuccessIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, work_result struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.success != null) {
//          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
//          oprot.writeString(struct.success);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class work_resultTupleSchemeFactory implements SchemeFactory {
//      public work_resultTupleScheme getScheme() {
//        return new work_resultTupleScheme();
//      }
//    }
//
//    private static class work_resultTupleScheme extends TupleScheme<work_result> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, work_result struct) throws org.apache.thrift.TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetSuccess()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetSuccess()) {
//          oprot.writeString(struct.success);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, work_result struct) throws org.apache.thrift.TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          struct.success = iprot.readString();
//          struct.setSuccessIsSet(true);
//        }
//      }
//    }
//
//  }
//
//}
